init: 创建一个项目仓库
add: 添加文件到暂存区
	add xx1,xx2: 添加多个
	add .: 添加全部
commit: 提交     
	-m"xx" 注释
	
diff: 查看修改但未add的部分

log: 查看commit日志
	参数: 	--pretty=oneline   只展示一行
			--graph		可以查看分支信息
			--abbrev-commit		只显示版本号开头7位
reflog: 查看操作日志
	
reset: 回退到指定版本
	参数--head
		HEAD^: 将HEAD指针往前挪一格
			^表示回退一个版本  ^^表示2个   ~100表示回退100个版本
		[版本号]: 跳转到指定版本

版本库: .git文件夹
暂存区: add添加的地方
工作区: 当前文件夹
master: 主分支
HEAD: 指向主分支的指针

checkout -- [文件名]: 撤销工作区修改(从暂存区复制 如果暂存区没有则是版本库)

reset HEAD [文件名]: 取消暂存区的提交(将暂存区的指定文件去掉)
restore --staged [文件名]: 同上

branch: 查看分支
branch [分支名]: 创建分支
branch -d [分支名]: 删除分支
branch -D [分支名]: 强制删除分支(未合并的分支)
switch [分支名]: 切换指定分支

switch -c [分支名]: -c: 创建并切换指定分支
merge [分支名]: 将指定分支合并到当前分支
	参数: 	--on-ff: 本次提交禁用快速合并(Fast forward)模式, 禁用后 合并时会有一个新的commit
			-m 注释
	merge --on-ff -m"abc" dev


d2+d1


stash: 将工作区的进度隐藏, 并将工作区恢复到上一次commit
stash list: 查看历史stash
stach apply [编号]: 恢复被隐藏的进度
stach pop [编号]: 恢复被隐藏的进度 并删除该stash

cherry-pick [版本号]: 将该提交 在该分支重复一遍

remote: 查看远程库的信息
remote -v: 查看详细信息(抓取和推送地址)



clone [SSH地址] 将远程库的代码clone到本地
pull: 拉取远程库的最新代码

branch --set-upstream-to [本地分支名] origin/[远程分支名]: 将本地分支与远程分支进行绑定
push origin [本地分支名]: 将本地分支推送到远程分支 (同名分支, 如果远程没有则会创建)


rebase [分支名]: 以变基的方式将当前分支的commit提交合并到指定分支上
(注意  rebase时  如果有多个commit冲突,  每次解决后需要add才能展示下一个commit冲突   也就是需要逐步解决)


branch --set-upstream-to [本地分支名] origin/[远程分支名]: 将本地分支与远程分支进行绑定
push origin [本地分支名]: 将本地分支推送到远程分支 (同名分支, 如果远程没有则会创建)


tag: 查看现有标签
tag [标签名]: 为当前分支的最新commit创建一个标签
tag [标签名] [版本号]: 为指定版本号创建一个标签
tag -a [标签名] -m"注释" [版本号]: 创建标签并写备注
tag -d [标签名]: 删除指定标签
push origin [标签名]: 将标签推送到远程库
push origin --tags: 推送全部标签
删除远程标签:
先删除本地标签  然后 push origin :refs/tags/[标签名]
show [标签名]: 查看标签信息